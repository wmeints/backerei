using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using FluentValidation.Results;

namespace Backerei.Catalog.Domain.Common
{
    /// <summary>
    /// Defines the output of a domain operation.
    /// </summary>
    /// <typeparam name="TResponse">Type of response to generate.</typeparam>
    public abstract class Response<TResponse> where TResponse: Response<TResponse>, new()
    {
        protected Response()
        {
            
        }
        
        /// <summary>
        /// Gets the validation that were generated by the operation.
        /// </summary>
        public IEnumerable<ValidationError> Errors { get; private set; }

        /// <summary>
        /// Gets whether the result of the operation is valid.
        /// </summary>
        public bool IsValid => !Errors.Any();
        
        /// <summary>
        /// Gets whether the result of the operation is invalid.
        /// </summary>
        public bool IsInvalid => Errors.Any();
        
        /// <summary>
        /// Creates an invalid response.
        /// </summary>
        /// <param name="failures">Errors that caused the invalid response.</param>
        /// <returns>Returns the invalid response object.</returns>
        public static TResponse Invalid(IEnumerable<ValidationFailure> failures)
        {
            var validationErrors = failures.Select(
                x => new ValidationError(x.PropertyName, x.ErrorMessage));

            var response = new TResponse
            {
                Errors = validationErrors
            };

            return response;
        }
    }
}